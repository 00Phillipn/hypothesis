# This test code was written by the `hypothesis.extra.ghostwriter` module
# and is provided under the Creative Commons Zero public domain dedication.

import xml.etree.ElementTree
from hypothesis import given, strategies as st

# TODO: replace st.nothing() with appropriate strategies


@given(
    default_namespace=st.none(),
    element=st.nothing(),
    encoding=st.none(),
    method=st.none(),
    parser=st.none(),
    short_empty_elements=st.booleans(),
    xml_declaration=st.none(),
)
def test_roundtrip_tostring_XML(
    default_namespace,
    element,
    encoding,
    method,
    parser,
    short_empty_elements,
    xml_declaration,
):
    value0 = xml.etree.ElementTree.tostring(
        element=element,
        encoding=encoding,
        method=method,
        xml_declaration=xml_declaration,
        default_namespace=default_namespace,
        short_empty_elements=short_empty_elements,
    )
    value1 = xml.etree.ElementTree.XML(text=value0, parser=parser)
    assert element == value1, (element, value1)


@given(
    default_namespace=st.none(),
    element=st.nothing(),
    encoding=st.none(),
    method=st.none(),
    parser=st.none(),
    short_empty_elements=st.booleans(),
    xml_declaration=st.none(),
)
def test_roundtrip_tostringlist_fromstringlist(
    default_namespace,
    element,
    encoding,
    method,
    parser,
    short_empty_elements,
    xml_declaration,
):
    value0 = xml.etree.ElementTree.tostringlist(
        element=element,
        encoding=encoding,
        method=method,
        xml_declaration=xml_declaration,
        default_namespace=default_namespace,
        short_empty_elements=short_empty_elements,
    )
    value1 = xml.etree.ElementTree.fromstringlist(sequence=value0, parser=parser)
    assert element == value1, (element, value1)


@given(
    write=st.nothing(),
    with_comments=st.booleans(),
    strip_text=st.booleans(),
    rewrite_prefixes=st.booleans(),
    qname_aware_tags=st.none(),
    qname_aware_attrs=st.none(),
    exclude_attrs=st.none(),
    exclude_tags=st.none(),
)
def test_fuzz_C14NWriterTarget(
    write,
    with_comments,
    strip_text,
    rewrite_prefixes,
    qname_aware_tags,
    qname_aware_attrs,
    exclude_attrs,
    exclude_tags,
):
    xml.etree.ElementTree.C14NWriterTarget(
        write=write,
        with_comments=with_comments,
        strip_text=strip_text,
        rewrite_prefixes=rewrite_prefixes,
        qname_aware_tags=qname_aware_tags,
        qname_aware_attrs=qname_aware_attrs,
        exclude_attrs=exclude_attrs,
        exclude_tags=exclude_tags,
    )


@given(text=st.none())
def test_fuzz_Comment(text):
    xml.etree.ElementTree.Comment(text=text)


@given(element=st.none(), file=st.none())
def test_fuzz_ElementTree(element, file):
    xml.etree.ElementTree.ElementTree(element=element, file=file)


@given(target=st.nothing(), text=st.none())
def test_fuzz_ProcessingInstruction(target, text):
    xml.etree.ElementTree.ProcessingInstruction(target=target, text=text)


@given(text_or_uri=st.nothing(), tag=st.none())
def test_fuzz_QName(text_or_uri, tag):
    xml.etree.ElementTree.QName(text_or_uri=text_or_uri, tag=tag)


@given(text=st.text(), parser=st.none())
def test_fuzz_XML(text, parser):
    xml.etree.ElementTree.XML(text=text, parser=parser)


@given(text=st.text(), parser=st.none())
def test_fuzz_XMLID(text, parser):
    xml.etree.ElementTree.XMLID(text=text, parser=parser)


@given(events=st.none(), _parser=st.none())
def test_fuzz_XMLPullParser(events, _parser):
    xml.etree.ElementTree.XMLPullParser(events=events, _parser=_parser)


@given(xml_data=st.none(), out=st.none(), from_file=st.none())
def test_fuzz_canonicalize(xml_data, out, from_file):
    xml.etree.ElementTree.canonicalize(xml_data=xml_data, out=out, from_file=from_file)


@given(elem=st.nothing())
def test_fuzz_dump(elem):
    xml.etree.ElementTree.dump(elem=elem)


@given(element=st.nothing())
def test_fuzz_iselement(element):
    xml.etree.ElementTree.iselement(element=element)


@given(source=st.nothing(), events=st.none(), parser=st.none())
def test_fuzz_iterparse(source, events, parser):
    xml.etree.ElementTree.iterparse(source=source, events=events, parser=parser)


@given(source=st.nothing(), parser=st.none())
def test_fuzz_parse(source, parser):
    xml.etree.ElementTree.parse(source=source, parser=parser)


@given(prefix=st.text(), uri=st.nothing())
def test_fuzz_register_namespace(prefix, uri):
    xml.etree.ElementTree.register_namespace(prefix=prefix, uri=uri)
