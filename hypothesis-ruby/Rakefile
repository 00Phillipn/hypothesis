# frozen_string_literal: true

require 'rubygems'
require 'helix_runtime/build_task'
require 'date'
require 'open3'

begin
  require 'rspec/core/rake_task'
  RSpec::Core::RakeTask.new(:spec)

  require 'rake/testtask'

  Rake::TestTask.new(minitests: :build) do |t|
    t.test_files = FileList['minitests/**/test_*.rb']
    t.verbose = true
  end

  task :rust_tests do
    sh 'cargo test'
  end

  task test: %i[build spec minitests rust_tests]
rescue LoadError
end

# Monkeypatch build to fail on error.
# See https://github.com/tildeio/helix/issues/133
module HelixRuntime
  class Project
    alias original_build cargo_build

    def cargo_build
      raise 'Build failed' unless original_build
    end
  end
end

HelixRuntime::BuildTask.new

def rubocop(fix:)
  sh "bundle exec rubocop #{'-a' if fix} lib spec minitests " \
  'Rakefile hypothesis-specs.gemspec'
end

task :checkformat do
  rubocop(fix: false)
end

task :format do
  rubocop(fix: true)
end

begin
  require 'yard'

  YARD::Rake::YardocTask.new(:runyard) do |t|
    t.files = [
      'lib/hypothesis.rb', 'lib/hypothesis/errors.rb',
      'lib/hypothesis/possible.rb'
    ]
    t.options = ['--markup=markdown', '--no-private']
  end

  task doc: :runyard do
    YARD::Registry.load

    objs = YARD::Registry.select do |o|
      is_private = false
      t = o
      until t.root?
        if t.visibility != :public
          is_private = true
          break
        end
        t = t.parent
      end

      !is_private && o.docstring.blank?
    end

    objs.sort_by! { |o| o.name.to_s }

    unless objs.empty?
      abort "Undocumented objects: #{objs.map(&:name).join(', ')}"
    end
  end
rescue LoadError
end

GEMSPEC = 'hypothesis-specs.gemspec'

RELEASE_FILE = 'RELEASE.md'
CHANGELOG = 'CHANGELOG.md'

def run_for_output(*args)
  out, result = Open3.capture2(*args)
  abort if result.exitstatus != 0
  out.strip
end

task :update_changelog_and_version do
  if File.exist?(RELEASE_FILE)
    spec = Gem::Specification.load(GEMSPEC)

    release_contents = IO.read(RELEASE_FILE).strip
    release_type, release_contents = release_contents.split("\n", 2)

    match = /RELEASE_TYPE: +(major|minor|patch)/.match(release_type)
    if match
      release_type = match[1]
      release_contents = release_contents.strip
    else
      abort "Invalid release type line #{release_type.inspect}"
    end

    components = spec.version.segments.to_a
    if release_type == 'major'
      components[0] += 1
    elsif release_type == 'minor'
      components[1] += 1
    else
      if release_type != 'patch'
        raise "Unexpected release type #{release_type.inspect}"
      end
      components[2] += 1
    end

    new_version = components.join('.')
    new_date = Date.today.strftime

    lines = File.readlines(GEMSPEC).map do |l|
      l.sub(/(s.version += +)'.+$/, "\\1'#{new_version}'").sub(
        /(s.date += +)'.+$/, "\\1'#{new_date}'"
      )
    end

    out = File.new(GEMSPEC, 'w')
    lines.each do |l|
      out.write(l)
    end
    out.close
  end
end

task :gem do
  sh 'rm -rf hypothesis-specs*.gem'
  sh 'git clean -fdx lib'
  sh 'gem build hypothesis-specs.gemspec'
end
